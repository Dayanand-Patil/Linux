//Receiving over the air updates – OTA  -- 
	Android DownloadManager service is responsible to download and update the fota over the air.

types of update:
1. system updates—when a new Android version has been released,
2. security updates—when some critical vulnerability has been fixed

//--AOSP Release Tools
http://jhshi.me/2014/11/09/aosp-release-tools/index.html#.XgrWW8ZS-VA

http://jhshi.me/2013/12/02/how-to-create-and-sign-ota-package/index.html#.XgmgwMZS-VA

http://jhshi.me/2013/12/13/how-to-apply-downloaded-ota-package/index.html#.XgnEqcZS-VA

http://jhshi.me/2014/08/28/sign-issues-related-to-ota-update/index.html#.XgnECMZS-VA

https://forum.xda-developers.com/showthread.php?t=1187313

http://jhshi.me/2014/07/02/fix-adb-permissions/index.html#.XgnFrMZS-VC

//APK signing:
Each APK in the final release has to be properly signed by defining LOCAL_CERTIFICATE. 
For example, in Android.mk file of packages/apps/Settings, there is this line:

LOCAL_CERTIFICATE := platform

This script will first unpack the input target files, then sign each APKs using proper keys, and repack them in to a new signed target files zip
// ./build/tools/releasetools/sign_target_file_apks -o -d $KEY_DIR out/dist/aosp_hammerhead-target_files-1.2.zip /tmp/signed.zip

Generate Release File:
1. You can either generate a full image file that suitable for fastboot update, 
2. OR, you can generate an OTA file that can be updated via recovery.

//Full System Image

This script will pack the signed target files into one image file that can be flashed via fastboot update.
//$ ./build/tools/releasetools/img_from_target_files /tmp/signed.zip /tmp/final-release.img

//OTA Package: you can reboot the device into recovery mode, and use adb sideload to flash the update for testing
1. full OTA:
	$ ./build/tools/releasetools/ota_from_target_files -k $KEY_DIR/platform /tmp/signed.zip /tmp/final-full-ota.zip  
2. incremental OTA: 
	The script will compare current target files with the one from last release, and will generate binary diff if they're different.
	$ ./build/tools/releasetools/ota_from_target_files -k $KEY_DIR/platform -i /tmp/source-signed.zip /tmp/target-signed.zip /tmp/final-full-ota.zip



//How to Create and Sign OTA Package
//Directory Structure: Suppose we have a patched version of 'libc' from 'system/lib/libc.so' and we want to overwrite the previous one already in participants' phone

myupdate
|-- META-INF
|   `-- com
|       `-- google
|           `-- android
|               |-- update-binary
|               `-- updater-script
`-- system
    `-- lib
        `-- libc.so

//updater-script
this script is generated by efiy_generatorscript.py 

//Platform OTA Certificates
	the certificates stored in /system/etc/security/otacerts.zip
set the above ota signature PRODUCT_OTA_PUBLIC_KEYS and PRODUCT_EXTRA_RECOVERY_KEYS that will be included ito final build
While applying ota device boots into recovery mode. The recovery will first check the signature of the OTA package


